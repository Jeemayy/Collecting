###SOAL 1
Additive_RNG <- function(a, z0, c, m, n) {
  xi <- matrix(NA, n, 3)
  colnames(xi) <- c("aZ(i-1)+c", "Xi", "Ui")
  for (i in 1:n) {
    xi[i, 1] <- (a * z0 + c)  # Menghasilkan nilai pada kolom pertama (Zi = aZ0+c)
    xi[i, 2] <- xi[i, 1] %% m  # Menghasilkan nilai pada kolom kedua (Zi mod m)
    xi[i, 3] <- xi[i, 2] / m  # Menghasilkan nilai uniform pada kolom ketiga (Ui)
    z0 <- xi[i, 2]  # z0 akan digantikan dengan nilai Zi mod m untuk iterasi berikutnya
  }
  hist(xi[, 3], main = "Additive RNG")  # Menampilkan histogram nilai uniform
  View(xi)  # Menampilkan data xi dalam tampilan data frame
}

multiplicative_RNG <- function(a, z0, m, n) {
  xj <- matrix(NA, n, 3)
  colnames(xj) <- c("aZ", "Xj", "Uj")
  for (j in 1:n) {
    xj[j, 1] <- (a * z0)
    xj[j, 2] <- xj[j, 1] %% m
    xj[j, 3] <- xj[j, 2] / m
    z0 <- xj[j, 2]
  }
  hist(xj[, 3], main = "Multiplicative RNG")  # Menampilkan histogram nilai uniform
  View(xj)  # Menampilkan data xj dalam tampilan data frame
}

# Menjalankan fungsi Additive_RNG
Additive_RNG(199, 12359, 2379, 1389, 1000)

# Menjalankan fungsi multiplicative_RNG
multiplicative_RNG(199, 12359, 1389, 1000)

###SOAL 2
generate_gamma <- function(n, alpha, beta) {
  data_gamma <- numeric(n)  # Membuat vektor kosong untuk menyimpan data
  
  for (i in 1:n) {
    # Membangkitkan data diskrit
    u <- runif(1)  # Menghasilkan bilangan acak dari distribusi seragam (0,1)
    x <- -log(u) / beta  # Menggunakan rumus invers dari distribusi eksponensial
    
    # Menghitung nilai data diskrit berdasarkan alpha
    k <- 0
    p <- exp(-beta)
    f <- p
    
    while (u > f) {
      k <- k + 1
      p <- (beta * p) / k
      f <- f + p
    }
    
    data_gamma[i] <- x + alpha - 1  # Menyimpan data diskrit dalam vektor
  }
  
  return(data_gamma)
}

# Mengatur parameter distribusi gamma
alpha <- 4
beta <- 5

# Jumlah data yang akan dibangkitkan
n <- 1000

# Memanggil fungsi generate_gamma untuk menghasilkan data diskrit gamma
data_gamma <- generate_gamma(n, alpha, beta)

# Membuat data frame dari hasil data diskrit
df <- data.frame(Data = data_gamma)

# Menampilkan data frame
View(df)


###SOAL 3



###SOAL 4
# Fungsi untuk menjalankan algoritma MCMC Metropolis-Hastings
run_mcmc_metropolis_hastings <- function(Y, X1, X2, initial_sample, num_iterations, proposal_sd) {
  accepted_samples <- matrix(NA, nrow = num_iterations, ncol = length(initial_sample))  # Membuat matriks kosong untuk menyimpan sampel yang diterima
  colnames(accepted_samples) <- c("Intercept", "X1", "X2")  # Menyimpan nama kolom matriks
  accepted_samples[1, ] <- initial_sample  # Menyimpan parameter awal pada baris pertama matriks
  current_log_likelihood <- sum(dnorm(Y - (initial_sample[1] + initial_sample[2]*X1 + initial_sample[3]*X2), sd = 1, log = TRUE))  # Menghitung likelihood awal
  
  for (i in 2:num_iterations) {
    proposed_sample <- rnorm(length(initial_sample), mean = accepted_samples[i-1, ], sd = proposal_sd)  # Menghasilkan sampel proposisi
    proposed_log_likelihood <- sum(dnorm(Y - (proposed_sample[1] + proposed_sample[2]*X1 + proposed_sample[3]*X2), sd = 1, log = TRUE))  # Menghitung likelihood sampel proposisi
    
    acceptance_ratio <- min(1, exp(proposed_log_likelihood - current_log_likelihood))  # Menghitung rasio penerimaan
    
    if (runif(1) < acceptance_ratio) {
      accepted_samples[i, ] <- proposed_sample  # Menerima sampel proposisi
      current_log_likelihood <- proposed_log_likelihood
    } else {
      accepted_samples[i, ] <- accepted_samples[i-1, ]  # Menolak sampel proposisi dan menggunakan sampel sebelumnya
    }
  }
  
  data.frame(accepted_samples)  # Mengembalikan hasil sampel yang diterima dalam bentuk data frame
}

# Data simulasi regresi linear
n <- 100  # Jumlah observasi
X1 <- runif(n, 0, 10)  # Variabel prediktor X1
X2 <- runif(n, 0, 10)  # Variabel prediktor X2
epsilon <- rnorm(n, 0, 1)  # Komponen error epsilon
Y <- 5.32 + 0.12*X1 + 0.05*X2 + epsilon  # Variabel respons Y

# Parameter awal dan konfigurasi MCMC
initial_sample <- c(5, 0.1, 0.05)  # Nilai awal parameter beta
num_iterations <- 10000  # Jumlah iterasi MCMC
proposal_sd <- c(0.1, 0.1, 0.1)  # Standar deviasi distribusi proposal

# Menjalankan MCMC Metropolis-Hastings
samples <- run_mcmc_metropolis_hastings(Y, X1, X2, initial_sample, num_iterations, proposal_sd)  # Memanggil fungsi run_mcmc_metropolis_hastings

# Melihat hasil sampel yang diterima
View(samples)  # Menampilkan hasil sampel dalam tampilan data frame

